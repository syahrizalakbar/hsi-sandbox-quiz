import Api from "@/data/api/api"
import { QueryClient, dehydrate } from "@tanstack/react-query"
import { GetServerSidePropsContext } from "next"
import Head from "next/head"
import Image from "next/image"
import Link from "next/link"
import { Fragment, useMemo } from "react"
import Appbar from "@/components/appbar"
import combineNames from "@/utils/combine_names"
import PostFooter from "@/components/post-footer"
import { useInfiniteQuery } from "@tanstack/react-query"

type PropsIndex = {
  sort: string
}

export default function Index({ sort }: PropsIndex) {
  const { params, key, req } = useMemo(
    () => Api.getArticleList({ sort }),
    [sort],
  )
  const query = useInfiniteQuery({
    queryKey: key(),
    queryFn: ({ pageParam }) => {
      params.page = pageParam
      return req()
    },
    getNextPageParam: (lastPage, _) => {
      const page = lastPage.meta?.pagination?.page ?? 1
      const totalPages = lastPage.meta?.pagination?.totalPages ?? 1
      if (page < totalPages) {
        return page + 1
      }
      return undefined
    },
    staleTime: Infinity,
    cacheTime: Infinity,
  })

  return (
    <>
      <Head>
        <title>Home - Quiz 3</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container max-w-5xl mx-auto p-8">
        <Appbar sortActive={sort} showMenu={true} />
        <div>
          {query.data?.pages?.map((group, index) => {
            return (
              <Fragment key={index}>
                {group.data?.map((article, _) => (
                  <div key={article.id} className="mb-16">
                    {article.thumbnail && (
                      <div className="relative aspect-image">
                        <Link href={"/" + article.slug}>
                          <Image
                            fill={true}
                            src={article.thumbnail}
                            alt={article.title ?? ""}
                            sizes="100%"
                          ></Image>
                        </Link>
                      </div>
                    )}
                    <PostFooter
                      category={article.category?.name?.toUpperCase()}
                      author={combineNames([
                        article.author?.firstName,
                        article.author?.middleName,
                        article.author?.lastName,
                      ]).toUpperCase()}
                    />
                    <Link href={"/" + article.slug}>
                      <h1 className="text-2xl font-semibold mt-2 md:mt-4 md:text-4xl ">
                        {article.title}
                      </h1>
                    </Link>
                  </div>
                ))}
              </Fragment>
            )
          })}
        </div>
        {query.hasNextPage && (
          <button
            onClick={
              !query.isFetchingNextPage
                ? () => query.fetchNextPage()
                : undefined
            }
            className="flex mb-16 mx-auto rounded-full border-primary px-4 py-2 border text-primary hover:text-white hover:bg-primary"
          >
            {query.isFetchingNextPage ? "Loading..." : "Load More"}
          </button>
        )}
      </main>
    </>
  )
}

export const getServerSideProps = async (
  context: GetServerSidePropsContext,
) => {
  const query = context.query
  const sort: string | undefined = query.sort
    ? query.sort?.toString()
    : "popular"

  const { key, req } = Api.getArticleList({ sort })
  const queryClient = new QueryClient()
  await queryClient.prefetchInfiniteQuery({
    queryKey: key(),
    queryFn: () => req(),
  })

  return {
    props: {
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
      sort,
    },
  }
}
